// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/goodbye/goodbye.proto

package goodbye

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Farewell_SayGoodbye_FullMethodName              = "/grpc.goodbye.Farewell/SayGoodbye"
	Farewell_SayGoodbyeStream_FullMethodName        = "/grpc.goodbye.Farewell/SayGoodbyeStream"
	Farewell_SayGoodbyeClientStream_FullMethodName  = "/grpc.goodbye.Farewell/SayGoodbyeClientStream"
	Farewell_SayGoodbyeBidirectional_FullMethodName = "/grpc.goodbye.Farewell/SayGoodbyeBidirectional"
)

// FarewellClient is the client API for Farewell service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The goodbye service definition.
type FarewellClient interface {
	// Sends a goodbye message
	SayGoodbye(ctx context.Context, in *GoodbyeRequest, opts ...grpc.CallOption) (*GoodbyeReply, error)
	// Sends multiple goodbye messages in a stream
	SayGoodbyeStream(ctx context.Context, in *GoodbyeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GoodbyeReply], error)
	// Client sends multiple names, server responds with farewell summary
	SayGoodbyeClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GoodbyeRequest, GoodbyeReply], error)
	// Bidirectional streaming - client sends names, server responds to each
	SayGoodbyeBidirectional(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GoodbyeRequest, GoodbyeReply], error)
}

type farewellClient struct {
	cc grpc.ClientConnInterface
}

func NewFarewellClient(cc grpc.ClientConnInterface) FarewellClient {
	return &farewellClient{cc}
}

func (c *farewellClient) SayGoodbye(ctx context.Context, in *GoodbyeRequest, opts ...grpc.CallOption) (*GoodbyeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodbyeReply)
	err := c.cc.Invoke(ctx, Farewell_SayGoodbye_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farewellClient) SayGoodbyeStream(ctx context.Context, in *GoodbyeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GoodbyeReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Farewell_ServiceDesc.Streams[0], Farewell_SayGoodbyeStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GoodbyeRequest, GoodbyeReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Farewell_SayGoodbyeStreamClient = grpc.ServerStreamingClient[GoodbyeReply]

func (c *farewellClient) SayGoodbyeClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GoodbyeRequest, GoodbyeReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Farewell_ServiceDesc.Streams[1], Farewell_SayGoodbyeClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GoodbyeRequest, GoodbyeReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Farewell_SayGoodbyeClientStreamClient = grpc.ClientStreamingClient[GoodbyeRequest, GoodbyeReply]

func (c *farewellClient) SayGoodbyeBidirectional(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GoodbyeRequest, GoodbyeReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Farewell_ServiceDesc.Streams[2], Farewell_SayGoodbyeBidirectional_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GoodbyeRequest, GoodbyeReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Farewell_SayGoodbyeBidirectionalClient = grpc.BidiStreamingClient[GoodbyeRequest, GoodbyeReply]

// FarewellServer is the server API for Farewell service.
// All implementations must embed UnimplementedFarewellServer
// for forward compatibility.
//
// The goodbye service definition.
type FarewellServer interface {
	// Sends a goodbye message
	SayGoodbye(context.Context, *GoodbyeRequest) (*GoodbyeReply, error)
	// Sends multiple goodbye messages in a stream
	SayGoodbyeStream(*GoodbyeRequest, grpc.ServerStreamingServer[GoodbyeReply]) error
	// Client sends multiple names, server responds with farewell summary
	SayGoodbyeClientStream(grpc.ClientStreamingServer[GoodbyeRequest, GoodbyeReply]) error
	// Bidirectional streaming - client sends names, server responds to each
	SayGoodbyeBidirectional(grpc.BidiStreamingServer[GoodbyeRequest, GoodbyeReply]) error
	mustEmbedUnimplementedFarewellServer()
}

// UnimplementedFarewellServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFarewellServer struct{}

func (UnimplementedFarewellServer) SayGoodbye(context.Context, *GoodbyeRequest) (*GoodbyeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayGoodbye not implemented")
}
func (UnimplementedFarewellServer) SayGoodbyeStream(*GoodbyeRequest, grpc.ServerStreamingServer[GoodbyeReply]) error {
	return status.Errorf(codes.Unimplemented, "method SayGoodbyeStream not implemented")
}
func (UnimplementedFarewellServer) SayGoodbyeClientStream(grpc.ClientStreamingServer[GoodbyeRequest, GoodbyeReply]) error {
	return status.Errorf(codes.Unimplemented, "method SayGoodbyeClientStream not implemented")
}
func (UnimplementedFarewellServer) SayGoodbyeBidirectional(grpc.BidiStreamingServer[GoodbyeRequest, GoodbyeReply]) error {
	return status.Errorf(codes.Unimplemented, "method SayGoodbyeBidirectional not implemented")
}
func (UnimplementedFarewellServer) mustEmbedUnimplementedFarewellServer() {}
func (UnimplementedFarewellServer) testEmbeddedByValue()                  {}

// UnsafeFarewellServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FarewellServer will
// result in compilation errors.
type UnsafeFarewellServer interface {
	mustEmbedUnimplementedFarewellServer()
}

func RegisterFarewellServer(s grpc.ServiceRegistrar, srv FarewellServer) {
	// If the following call pancis, it indicates UnimplementedFarewellServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Farewell_ServiceDesc, srv)
}

func _Farewell_SayGoodbye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodbyeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarewellServer).SayGoodbye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Farewell_SayGoodbye_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarewellServer).SayGoodbye(ctx, req.(*GoodbyeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Farewell_SayGoodbyeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GoodbyeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FarewellServer).SayGoodbyeStream(m, &grpc.GenericServerStream[GoodbyeRequest, GoodbyeReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Farewell_SayGoodbyeStreamServer = grpc.ServerStreamingServer[GoodbyeReply]

func _Farewell_SayGoodbyeClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FarewellServer).SayGoodbyeClientStream(&grpc.GenericServerStream[GoodbyeRequest, GoodbyeReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Farewell_SayGoodbyeClientStreamServer = grpc.ClientStreamingServer[GoodbyeRequest, GoodbyeReply]

func _Farewell_SayGoodbyeBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FarewellServer).SayGoodbyeBidirectional(&grpc.GenericServerStream[GoodbyeRequest, GoodbyeReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Farewell_SayGoodbyeBidirectionalServer = grpc.BidiStreamingServer[GoodbyeRequest, GoodbyeReply]

// Farewell_ServiceDesc is the grpc.ServiceDesc for Farewell service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Farewell_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.goodbye.Farewell",
	HandlerType: (*FarewellServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayGoodbye",
			Handler:    _Farewell_SayGoodbye_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayGoodbyeStream",
			Handler:       _Farewell_SayGoodbyeStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayGoodbyeClientStream",
			Handler:       _Farewell_SayGoodbyeClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayGoodbyeBidirectional",
			Handler:       _Farewell_SayGoodbyeBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/goodbye/goodbye.proto",
}
